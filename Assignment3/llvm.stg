group llvm;

return(a) ::= "<a>"

declare(var, expr, name) ::= <<
;evaluating expression
<expr>
;storing expression into variable
%.<var> = alloca i32, align 4
store i32 %.<name>, i32* %.<var>

>>

llvmProgram(declarations, statements) ::= <<
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

<declarations>
<statements>
>>

load(name, value) ::= <<
%.<name> = alloca i32, align 4
store i32 <value>, i32* %.<name>

>>

add(expr1, expr2, name1, name2, result) ::= <<
;load into <name1>
<expr1>
;load into <name2>
<expr2>
%.<result> = add i32 %.<name1>, %.<name2>

>>