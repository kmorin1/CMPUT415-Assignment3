group llvm;

return(a) ::= "<a>"

declare(var, expr, name) ::= <<
;evaluating expression
<expr>
;storing expression into variable
%.<var> = alloca i32, align 4
store i32 %.<name>, i32* %.<var>

>>

llvmProgram(declarations, assignment, statements) ::= <<
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

<declarations: { a | @.<a> = global i32 0, align 4<\n>}>

define i32 @main(i32 %argc, i8** %argv) nounwind uwtable {

<assignments:{ b | <b>}>
<statements>

ret i32 0
}

declare i32 @printf(i8*, ...)
>>

outputAssi(var, expr, name, temp) ::= <<
;start outputAssi
<expr>

store i32 %.<name>, i32* @.<var>
;end outputAssi

>>

load_num(name, value) ::= <<
;start load_num
%.temp<name> = alloca i32, align 4
store i32 <value>, i32* %.temp<name>
%.<name> = load i32* %.temp<name>
;end load_num

>>

load_var(name, var) ::= <<
;start load_var
%.<name> = load i32* @.<var>
;end load_var

>>

print(expr, result) ::= <<
;start print
<expr>

call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %.<result>)
;end print

>>

equals(expr1, expr2, name1, name2, result) ::= <<
;start equals
<expr1>
<expr2>

%.temp<result> = icmp eq  i32 %.<name1>, %.<name2>
%.<result> = i32 %.temp<result>
;end equals
>>


add(expr1, expr2, name1, name2, result) ::= <<
;start add
<expr1>
<expr2>
%.<result> = add i32 %.<name1>, %.<name2>
;end add

>>

sub(expr1, expr2, name1, name2, result) ::= <<
;start add
<expr1>
<expr2>
%.<result> = sub i32 %.<name1>, %.<name2>
;end add

>>

mul(expr1, expr2, name1, name2, result) ::= <<
;start add
<expr1>
<expr2>
%.<result> = mul i32 %.<name1>, %.<name2>
;end add

>>

div(expr1, expr2, name1, name2, result) ::= <<
;start add
<expr1>
<expr2>
%.<result> = udiv i32 %.<name1>, %.<name2>
;end add

>>